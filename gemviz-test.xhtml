<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html 
      PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
<head>
<title>SVG Tests</title>
<link rel="stylesheet" href="http://yui.yahooapis.com/2.8.0r4/build/reset-fonts-grids/reset-fonts-grids.css" type="text/css" />
<link rel="stylesheet" href="style.css" media="screen" type="text/css" />
<style type="text/css">
  html, body, #doc3, #bd, #yui-main, #yui-main > .yui-b, #yui-main > .yui-b > .yui-g, #paper {
    height: 98%;
    margin: 0 0;
  }

  #paper {
    overflow: auto;
  }
  
  label {
    font-weight: bold;
  }
  .tool {
    cursor: pointer;
    padding: 4px;
  }
  .tool.selected {
    padding: 2px;
    border: 2px solid blue;
  }
</style>
<meta name="copyright" content="Copyright 2011" />
<meta name="author" content="Peter Abrahamsen" />
</head>
<body class="yui-skin-sam">
<div id="doc3" class="yui-t5">
<div id="bd" role="main">
<div id="yui-main">
<div class="yui-b"><div class="yui-g">

<svg:svg version="1.1" id="paper">
  <style>
    @namespace "http://www.w3.org/2000/svg";
    .genre {
      font-size: 24px;
    }
    .mode-move .genre {
      cursor: pointer;
    }
    .mode-connect .genre {
      cursor: crosshair;
    }
    .genre rect {
      stroke: black;
      fill: white;
    }
    .genre.selected rect {
      fill: black;
    }
    .genre text {
      fill: black;
    }
    .genre.selected text {
      fill: white;
    }
    .template {
      display: none;
    }
  </style>
  <svg:defs>
  </svg:defs>

  <svg:g class="genre template" transform="translate(10,7)">
    <svg:rect height="34" width="140" rx="5" ry="5"></svg:rect>
    <svg:text x="10" y="24" >New Genre</svg:text>
  </svg:g>
</svg:svg>

</div></div>
</div>

<!-- SIDEBAR -->
<div id="sidebar" class="yui-b">
<img src="images/tool-move.png" height="30" data-tool-name="move" class="tool selected" />
<img src="images/tool-connect.png" data-tool-name="connect" class="tool" />
<br />
<label for="addGenre">Genres</label><br/>
<ul id="genreList">
<li class="genreListing template"></li>
</ul>
<input type="text" name="genreNmae" id="addGenre" placeholder="New Genre" />
</div>

</div>
</div>

<div class="yui3-genreeditor yui3-genreeditor-hidden">
  <div class="yui3-widget-hd">
    <h3>
      Edit Genre
      <img class="editor-close" src="closewhite.png" />
    </h3>
  </div>
  <div class="yui3-widget-bd">
    <label for='genre-name'>Name:</label>
    <input id='genre-name' type="text" name="name" value="" />
  </div>
</div>

<script type="text/javascript" src="http://yui.yahooapis.com/3.3.0/build/yui/yui-debug.js"></script>
<script>
<![CDATA[
"use strict";

var YUI_config = {
  filter: 'DEBUG',
  groups: {
    gemviz: {
      combine: false,
      base: 'js/',
      modules: {
        "gemviz-genre": { path: 'genre.js', requires: ['base', 'dd', 'collection'] },
        "gemviz-genre-editor": { path: "genre-editor.js", requires: ['overlay'] },
        "gemviz-graph": { path: "graph.js", requires: ['gemviz-genre'] }
      }
    }
  }
}

window.Y = YUI(YUI_config).use('gemviz-graph', 'node', function (Y) {
  var gemviz = Y.namespace('gemviz'),
      graph = window.graph = new gemviz.Graph({
                container: '#paper',
                template: Y.one('.genre.template')
              });
  Y.on('key', function (evt) {
    var input = evt.currentTarget,
        name = input.get('value'),
        genre = graph.newGenre(name);
    input.set('value', '');
  }, '#addGenre', 'down:13');

  graph.after('addGenre', function (evt) {
    var genre = evt.genre,
        listing = Y.one('.genreListing.template').cloneNode(true);
    listing.setAttribute('data-genre-uuid', Y.stamp(genre));
    listing.set('text', genre.get('name'));
    Y.one('#genreList').appendChild(listing);
  });

  Y.delegate('click', function (evt) {
    graph.set('mode', evt.currentTarget.getAttribute('data-tool-name'));
  }, '#sidebar', '.tool');

  graph.after('modeChange', function (evt) {
    Y.one('.tool.selected').removeClass('selected');
    Y.one('[data-tool-name=' + evt.newVal + ']').addClass('selected');
  });
});
]]>
</script>
</body>
</html>
